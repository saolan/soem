package ec.com.tecnointel.soem.tesoreria.modelo;
// Generated 26-jul-2016 22:29:48 by Hibernate Tools 5.1.0.Alpha2

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.HashSet;
import java.util.Objects;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedAttributeNode;
import javax.persistence.NamedEntityGraph;
import javax.persistence.OneToMany;
import javax.persistence.PrePersist;
import javax.persistence.PreUpdate;
import javax.persistence.Table;
import javax.persistence.TableGenerator;
import javax.validation.constraints.Size;

import ec.com.tecnointel.soem.contabilidad.modelo.Transaccion;
import ec.com.tecnointel.soem.egreso.modelo.PersCobr;
import ec.com.tecnointel.soem.parametro.modelo.DocuMoviEgre;
import ec.com.tecnointel.soem.parametro.modelo.Persona;
import ec.com.tecnointel.soem.parametro.modelo.Sucursal;

/**
 * FormPagoMoviEgre generated by hbm2java
 */
@Entity
@Table(name = "form_pago_movi_egre")
@NamedEntityGraph(name = "fpme.Graph", attributeNodes = 
{
	@NamedAttributeNode(value = "persona"),
	@NamedAttributeNode(value = "persCobr"),
	@NamedAttributeNode(value = "docuMoviEgre"),
	@NamedAttributeNode(value = "transaccion")
}
)
public class FormPagoMoviEgre implements java.io.Serializable {

	private DocuMoviEgre docuMoviEgre;
	private Integer numero;
	private PersCobr persCobr;
	private Persona persona;
	private Sucursal sucursal;
	private Transaccion transaccion;
	private Integer cajaMoviId;
	private LocalDate fecha;
	private LocalDateTime fechaHora;
	private LocalDateTime fechaHoraRegi;
	private Integer egresoId;
	private String refere;
	private BigDecimal total;
	private BigDecimal totalReci;
	private String nota;
	private Integer tranPlanId;
	private String estado;
	private Set<FpmeFormPago> fpmeFormPagos = new HashSet<FpmeFormPago>(0);
	
	private static final long serialVersionUID = -4973486985996851862L;

	public FormPagoMoviEgre() {
	}

	@Id
	@TableGenerator(name = "idFormPagoMoviEgre", table = "secuencial", pkColumnName = "tabla", pkColumnValue = "form_pago_movi_egre", valueColumnName = "numero", allocationSize = 1)
	@GeneratedValue(strategy = GenerationType.TABLE, generator = "idFormPagoMoviEgre")
	@Column(name = "FPME_ID", unique = true, nullable = false)
	public Integer getFpmeId() {
		return this.fpmeId;
	}

	public void setFpmeId(Integer fpmeId) {
		this.fpmeId = fpmeId;
	}

	@Column(name = "NUMERO")
	public Integer getNumero() {
		return numero;
	}

	public void setNumero(Integer numero) {
		this.numero = numero;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "DOCUMENTO_ID", nullable = false)
	public DocuMoviEgre getDocuMoviEgre() {
		return docuMoviEgre;
	}

	public void setDocuMoviEgre(DocuMoviEgre docuMoviEgre) {
		this.docuMoviEgre = docuMoviEgre;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "PERS_COBR_ID", nullable = false)
	public PersCobr getPersCobr() {
		return this.persCobr;
	}

	public void setPersCobr(PersCobr persCobr) {
		this.persCobr = persCobr;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "PERSONA_ID", nullable = false)
	public Persona getPersona() {
		return this.persona;
	}

	public void setPersona(Persona persona) {
		this.persona = persona;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "SUCURSAL_ID", nullable = false)
	public Sucursal getSucursal() {
		return this.sucursal;
	}

	public void setSucursal(Sucursal sucursal) {
		this.sucursal = sucursal;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "TRANSACCION_ID", nullable = true)
	public Transaccion getTransaccion() {
		return this.transaccion;
	}

	public void setTransaccion(Transaccion transaccion) {
		this.transaccion = transaccion;
	}

	@Column(name = "CAJA_MOVI_ID", nullable = false)
	public Integer getCajaMoviId() {
		return cajaMoviId;
	}

	public void setCajaMoviId(Integer cajaMoviId) {
		this.cajaMoviId = cajaMoviId;
	}

	@Column(columnDefinition = "DATE", name = "FECHA", nullable = false, length = 10)
	public LocalDate getFecha() {
		return fecha;
	}

	public void setFecha(LocalDate fecha) {
		this.fecha = fecha;
	}

	@Column(columnDefinition = "TIMESTAMP", name = "FECHA_HORA", nullable = false, length = 19)
	public LocalDateTime getFechaHora() {
		return fechaHora;
	}

	@Column(columnDefinition = "TIMESTAMP", name = "FECHA_HORA_REGI", nullable = false, length = 19)
	public LocalDateTime getFechaHoraRegi() {
		return fechaHoraRegi;
	}

	public void setFechaHoraRegi(LocalDateTime fechaHoraRegi) {
		this.fechaHoraRegi = fechaHoraRegi;
	}

	public void setFechaHora(LocalDateTime fechaHora) {
		this.fechaHora = fechaHora;
	}
 
//	Se utilizar como referencia para saber de que documento es el pago o cobro
//	y poder contabilizar desde ventas solo las notas de credito que tienen esta referencia
//	sino tiene esta referencia se realiza otra transaccion porque es un documento ingresado desde
//	el modulo de CXP;CXC
	@Column(name = "EGRESO_ID")
	public Integer getEgresoId() {
		return egresoId;
	}

	public void setEgresoId(Integer egresoId) {
		this.egresoId = egresoId;
	}

	@Column(name = "REFERE", nullable = true, length = 32)
	public String getRefere() {
		return this.refere;
	}

	public void setRefere(String refere) {
		this.refere = refere;
	}

	@Column(name = "TOTAL", nullable = false, precision = 14, scale = 6)
	public BigDecimal getTotal() {
		return this.total;
	}

	public void setTotal(BigDecimal total) {
		this.total = total;
	}

	@Column(name = "TOTAL_RECI", nullable = false, precision = 14, scale = 6)
	public BigDecimal getTotalReci() {
		return totalReci;
	}

	public void setTotalReci(BigDecimal totalReci) {
		this.totalReci = totalReci;
	}
	
	@Column(name = "NOTA")
	@Size(max = 255, message = "Nota no debe sobrepasar los 255 caracteres")	
	public String getNota() {
		return this.nota;
	}

	public void setNota(String nota) {
		this.nota = nota;
	}

//	Se utilizar como referencia generar una transaccion de otros pagos que no sean CXC
	@Column(name = "TRAN_PLAN_ID", nullable = false)
	public Integer getTranPlanId() {
		return tranPlanId;
	}

	public void setTranPlanId(Integer tranPlanId) {
		this.tranPlanId = tranPlanId;
	}

	@Column(name = "ESTADO", nullable = false)
	public String getEstado() {
		return estado;
	}

	public void setEstado(String estado) {
		this.estado = estado;
	}

//	@OneToMany(fetch = FetchType.LAZY, mappedBy = "formPagoMoviEgre")
//	public Set<CobrDeta> getCobrDetas() {
//		return this.cobrDetas;
//	}
//
//	public void setCobrDetas(Set<CobrDeta> cobrDetas) {
//		this.cobrDetas = cobrDetas;
//	}

	@OneToMany(fetch=FetchType.LAZY, mappedBy="formPagoMoviEgre")
    public Set<FpmeFormPago> getFpmeFormPagos() {
        return this.fpmeFormPagos;
    }
    
    public void setFpmeFormPagos(Set<FpmeFormPago> fpmeFormPagos) {
        this.fpmeFormPagos = fpmeFormPagos;
    }

	private Integer fpmeId;
	@Override
	public int hashCode() {
		return Objects.hash(fpmeId);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		FormPagoMoviEgre other = (FormPagoMoviEgre) obj;
		return Objects.equals(fpmeId, other.fpmeId);
	}
	
	@PrePersist
	public void previoPersist () {
		this.setFechaHoraRegi(LocalDateTime.now());
	}
	
	@PreUpdate
	public void previoUpdate () {
		this.setFechaHoraRegi(LocalDateTime.now());
	}
}
