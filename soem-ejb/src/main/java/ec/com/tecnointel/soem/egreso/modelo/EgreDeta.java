package ec.com.tecnointel.soem.egreso.modelo;
// Generated 26-jul-2016 22:29:48 by Hibernate Tools 5.1.0.Alpha2

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedAttributeNode;
import javax.persistence.NamedEntityGraph;
import javax.persistence.OneToMany;
import javax.persistence.PrePersist;
import javax.persistence.PreUpdate;
import javax.persistence.Table;
import javax.persistence.TableGenerator;
import javax.persistence.Transient;
import javax.validation.constraints.DecimalMin;
import javax.validation.constraints.Max;
import javax.validation.constraints.Min;

import ec.com.tecnointel.soem.inventario.modelo.Kardex;
import ec.com.tecnointel.soem.inventario.modelo.Producto;
import ec.com.tecnointel.soem.parametro.modelo.Precio;

/**
 * EgreDeta generated by hbm2java
 */
@Entity
@Table(name = "egre_deta")
@NamedEntityGraph(name = "egreDeta.Graph", attributeNodes = {
		@NamedAttributeNode(value = "producto"),
		@NamedAttributeNode(value = "egreso"),
		@NamedAttributeNode(value = "precio"),
})
public class EgreDeta implements java.io.Serializable {

	private Integer egreDetaId;
	private EgreDeta egreDeta;
	private Egreso egreso;
	private Producto producto;
	private Precio precio;
	private LocalDate fechaRegi;
	private LocalDateTime fechaHoraRegi;
	private BigDecimal cantid;
	private BigDecimal factor;
	private BigDecimal precioVent;
	private BigDecimal descue;
	private BigDecimal costo;
	private String nota;
	
	private Set<EgreDetaImpu> egreDetaImpus = new HashSet<EgreDetaImpu>(0);
	private Set<Kardex> kardexs = new HashSet<Kardex>(0);
	private Set<EgreDeta> egreDetas = new HashSet<EgreDeta>(0);

	private BigDecimal precioConImpu;
	private BigDecimal totalConImpu;
	private BigDecimal total;
	
	private static final long serialVersionUID = 41994585451314546L;

	public EgreDeta() {
	}

	public EgreDeta(Egreso egreso, EgreDeta egreDeta) {
		this.egreso = egreso;
		this.egreDeta = egreDeta;
	}

	@Id
	@TableGenerator(name = "idEgreDeta", table = "secuencial", pkColumnName = "tabla", pkColumnValue = "egre_deta", valueColumnName = "numero", allocationSize = 1)
	@GeneratedValue(strategy = GenerationType.TABLE, generator = "idEgreDeta")
	@Column(name = "EGRE_DETA_ID", unique = true, nullable = false)
	public Integer getEgreDetaId() {
		return this.egreDetaId;
	}
	
	public void setEgreDetaId(Integer egreDetaId) {
		this.egreDetaId = egreDetaId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "EGRE_DETA_SUPE_ID")
	public EgreDeta getEgreDeta() {
		return egreDeta;
	}

	public void setEgreDeta(EgreDeta egreDeta) {
		this.egreDeta = egreDeta;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "EGRESO_ID", nullable = false)
	public Egreso getEgreso() {
		return this.egreso;
	}

	public void setEgreso(Egreso egreso) {
		this.egreso = egreso;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "PRODUCTO_ID", nullable = false)
	public Producto getProducto() {
		return this.producto;
	}

	public void setProducto(Producto producto) {
		this.producto = producto;
	}
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "PRECIO_ID", nullable = false)
	public Precio getPrecio() {
		return this.precio;
	}

	public void setPrecio(Precio precio) {
		this.precio = precio;
	}

	@Column(columnDefinition = "DATE", name = "FECHA_REGI", nullable = false, length = 10)
	public LocalDate getFechaRegi() {
		return fechaRegi;
	}

	public void setFechaRegi(LocalDate fechaRegi) {
		this.fechaRegi = fechaRegi;
	}
	
	@Column(columnDefinition = "TIMESTAMP", name = "FECHA_HORA_REGI", nullable = false, length = 19)
	public LocalDateTime getFechaHoraRegi() {
		return fechaHoraRegi;
	}

	public void setFechaHoraRegi(LocalDateTime fechaHoraRegi) {
		this.fechaHoraRegi = fechaHoraRegi;
	}
	
	@Column(name = "CANTID", nullable = false, precision = 12, scale = 6)
	@DecimalMin(value = "0.0001", message="No se permite valores negativos")
	public BigDecimal getCantid() {
		return this.cantid;
	}

	public void setCantid(BigDecimal cantid) {
		this.cantid = cantid;
	}

	@Column(name = "FACTOR", nullable = false, precision = 12, scale = 6)
	public BigDecimal getFactor() {
		return factor;
	}

	public void setFactor(BigDecimal factor) {
		this.factor = factor;
	}
	
	@Column(name = "PRECIO_VENT", nullable = false, precision = 12, scale = 6)
	public BigDecimal getPrecioVent() {
		return this.precioVent;
	}

	public void setPrecioVent(BigDecimal precioVent) {
		this.precioVent = precioVent;
	}

	@Column(name = "DESCUE", nullable = false, precision = 8, scale = 4)
	@Max(value = 100)
	@Min(0)
	public BigDecimal getDescue() {
		return this.descue;
	}

	public void setDescue(BigDecimal descue) {
		this.descue = descue;
	}

	@Column(name = "COSTO", nullable = false, precision = 12, scale = 6)
	public BigDecimal getCosto() {
		return this.costo;
	}

	public void setCosto(BigDecimal costo) {
		this.costo = costo;
	}

	@Column(name = "NOTA", length = 1024)
	public String getNota() {
		return nota;
	}

	public void setNota(String nota) {
		this.nota = nota;
	}
	
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "egreDeta")
	public Set<EgreDeta> getEgreDetas() {
		return egreDetas;
	}

	public void setEgreDetas(Set<EgreDeta> egreDetas) {
		this.egreDetas = egreDetas;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "egreDeta", cascade = { CascadeType.PERSIST, CascadeType.REMOVE, CascadeType.MERGE})
	public Set<EgreDetaImpu> getEgreDetaImpus() {
		return this.egreDetaImpus;
	}

	public void setEgreDetaImpus(Set<EgreDetaImpu> egreDetaImpus) {
		this.egreDetaImpus = egreDetaImpus;
	}

	@OneToMany(fetch=FetchType.LAZY, mappedBy="egreDeta")
    public Set<Kardex> getKardexs() {
        return this.kardexs;
    }
    
    public void setKardexs(Set<Kardex> kardexs) {
        this.kardexs = kardexs;
    }
	
    @Transient
	public BigDecimal getPrecioConImpu() {
		return precioConImpu;
	}

    public void setPrecioConImpu(BigDecimal precioConImpu) {
		this.precioConImpu = precioConImpu;
	}

	@Transient
	public BigDecimal getTotalConImpu() {
		return totalConImpu;
	}

	public void setTotalConImpu(BigDecimal totalConImpu) {
		this.totalConImpu = totalConImpu;
	}

	@Transient
    public BigDecimal getTotal() {
		return total;
	}
	
	public void setTotal(BigDecimal total) {
		this.total = total;
	}
	
	@PrePersist
	public void previoPersist () {
		this.setFechaRegi(LocalDate.now());
		this.setFechaHoraRegi(LocalDateTime.now());
	}
	
	@PreUpdate
	public void previoUpdate () {
		this.setFechaRegi(LocalDate.now());
		this.setFechaHoraRegi(LocalDateTime.now());
	}

	public BigDecimal calcularTotalBrutoSinImpu() {
		return cantid.multiply(precioVent);
	}

	public BigDecimal calcularDescueValor() {
		return (calcularTotalBrutoSinImpu().multiply(descue)).divide(new BigDecimal(100.));
	}

	public BigDecimal calcularTotalNetoSinImpu() {
		return calcularTotalBrutoSinImpu().subtract(calcularDescueValor());
	}
}
