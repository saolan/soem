package ec.com.tecnointel.soem.tesoreria.modelo;
// Generated 26-jul-2016 22:29:48 by Hibernate Tools 5.1.0.Alpha2

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedAttributeNode;
import javax.persistence.NamedEntityGraph;
import javax.persistence.OneToMany;
import javax.persistence.PrePersist;
import javax.persistence.PreUpdate;
import javax.persistence.Table;
import javax.persistence.TableGenerator;
import javax.validation.constraints.Size;

import ec.com.tecnointel.soem.contabilidad.modelo.Transaccion;
import ec.com.tecnointel.soem.parametro.modelo.DocuMoviIngr;
import ec.com.tecnointel.soem.parametro.modelo.FormPago;
import ec.com.tecnointel.soem.parametro.modelo.Persona;
import ec.com.tecnointel.soem.parametro.modelo.Sucursal;

/**
 * FormPagoMoviIngr generated by hbm2java
 */
@Entity
@Table(name = "form_pago_movi_ingr")
@NamedEntityGraph(name = "fpmi.Graph", attributeNodes = 
	{
		@NamedAttributeNode(value = "persona"),
		@NamedAttributeNode(value = "docuMoviIngr"),
		@NamedAttributeNode(value = "formPago"),
		@NamedAttributeNode(value = "transaccion")
	}
)
public class FormPagoMoviIngr implements java.io.Serializable {

	private Integer fpmiId;
	private DocuMoviIngr docuMoviIngr;
	private Integer numero;
	private FormPago formPago;
	private Persona persona;
	private Sucursal sucursal;
	private Transaccion transaccion;
	private LocalDate fecha;
	private LocalDateTime fechaHora;
	private LocalDateTime fechaHoraRegi;
	private Integer ingresoId;
	private String refere;
	private BigDecimal total;
	private String nota;
	private Integer tranPlanId;
	private String estado;
	private Set<PagoDeta> pagoDetas = new HashSet<PagoDeta>(0);

	private static final long serialVersionUID = 5525641947612741744L;

	public FormPagoMoviIngr() {
	}

	@Id
	@TableGenerator(name = "idFormPagoMoviIngr", table = "secuencial", pkColumnName = "tabla", pkColumnValue = "form_pago_movi_ingr", valueColumnName = "numero", allocationSize = 1)
	@GeneratedValue(strategy = GenerationType.TABLE, generator = "idFormPagoMoviIngr")
	@Column(name = "FPMI_ID", unique = true, nullable = false)
	public Integer getFpmiId() {
		return this.fpmiId;
	}

	public void setFpmiId(Integer fpmiId) {
		this.fpmiId = fpmiId;
	}

	@Column(name = "NUMERO")
	public Integer getNumero() {
		return numero;
	}

	public void setNumero(Integer numero) {
		this.numero = numero;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "DOCUMENTO_ID", nullable = false)
	public DocuMoviIngr getDocuMoviIngr() {
		return docuMoviIngr;
	}

	public void setDocuMoviIngr(DocuMoviIngr docuMoviIngr) {
		this.docuMoviIngr = docuMoviIngr;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "FORM_PAGO_ID", nullable = false)
	public FormPago getFormPago() {
		return this.formPago;
	}

	public void setFormPago(FormPago formPago) {
		this.formPago = formPago;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "PERSONA_ID", nullable = false)
	public Persona getPersona() {
		return this.persona;
	}

	public void setPersona(Persona persona) {
		this.persona = persona;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "SUCURSAL_ID", nullable = false)
	public Sucursal getSucursal() {
		return this.sucursal;
	}

	public void setSucursal(Sucursal sucursal) {
		this.sucursal = sucursal;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "TRANSACCION_ID", nullable = true)
	public Transaccion getTransaccion() {
		return this.transaccion;
	}

	public void setTransaccion(Transaccion transaccion) {
		this.transaccion = transaccion;
	}

	@Column(columnDefinition = "DATE", name = "FECHA", nullable = false, length = 10)
	public LocalDate getFecha() {
		return fecha;
	}

	public void setFecha(LocalDate fecha) {
		this.fecha = fecha;
	}

	@Column(columnDefinition = "TIMESTAMP", name = "FECHA_HORA", nullable = false, length = 19)
	public LocalDateTime getFechaHora() {
		return fechaHora;
	}

	@Column(columnDefinition = "TIMESTAMP", name = "FECHA_HORA_REGI", nullable = false, length = 19)
	public LocalDateTime getFechaHoraRegi() {
		return fechaHoraRegi;
	}

	public void setFechaHoraRegi(LocalDateTime fechaHoraRegi) {
		this.fechaHoraRegi = fechaHoraRegi;
	}

	public void setFechaHora(LocalDateTime fechaHora) {
		this.fechaHora = fechaHora;
	}

	//	Se utilizar como referencia para saber de que documento es el pago o cobro
//	y poder contabilizar desde ventas solo las notas de credito que tienen esta referencia
//	sino tiene esta referencia se realiza otra transaccion porque es un documento ingresado desde
//	el modulo de CXP;CXC
	@Column(name = "INGRESO_ID")
	public Integer getIngresoId() {
		return ingresoId;
	}

	public void setIngresoId(Integer ingresoId) {
		this.ingresoId = ingresoId;
	}

	@Column(name = "REFERE", nullable = true, length = 32)
	public String getRefere() {
		return this.refere;
	}

	public void setRefere(String refere) {
		this.refere = refere;
	}

	@Column(name = "TOTAL", nullable = false, precision = 14, scale = 6)
	public BigDecimal getTotal() {
		return this.total;
	}

	public void setTotal(BigDecimal total) {
		this.total = total;
	}

	@Column(name = "NOTA")
	@Size(max = 255, message = "Nota no debe sobrepasar los 255 caracteres")
	public String getNota() {
		return this.nota;
	}

	public void setNota(String nota) {
		this.nota = nota;
	}

//	Se utilizar como referencia generar una transaccion de otros pagos que no sean CXP
	@Column(name = "TRAN_PLAN_ID", nullable = false)
	public Integer getTranPlanId() {
		return tranPlanId;
	}

	public void setTranPlanId(Integer tranPlanId) {
		this.tranPlanId = tranPlanId;
	}
	
	@Column(name = "ESTADO", nullable = false)
	public String getEstado() {
		return estado;
	}

	public void setEstado(String estado) {
		this.estado = estado;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "formPagoMoviIngr")
	public Set<PagoDeta> getPagoDetas() {
		return this.pagoDetas;
	}

	public void setPagoDetas(Set<PagoDeta> pagoDetas) {
		this.pagoDetas = pagoDetas;
	}
	
	@PrePersist
	public void previoPersist () {
		this.setFechaHoraRegi(LocalDateTime.now());
	}

	@PreUpdate
	public void previoUpdate () {
		this.setFechaHoraRegi(LocalDateTime.now());
	}
}
